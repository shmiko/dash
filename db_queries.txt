db.messages.aggregate([
            {$project:{"headers.From":1,"headers.To":1,_id:0}},
            {$unwind:"$headers.To"},
            {$group:{_id:{From:"$headers.From",To:"$headers.To"},number {$sum:1}}},
            {$sort:{number:-1}},
            {$limit:3}
            ]);


Exact Query - Correct Answer is 3
db.messages.aggregate([{$match:{"headers.From":"andrew.fastow@enron.com","headers.To":"jeff.skilling@enron.com"}},{$project:{From:"$headers.From",To:"$headers.To",_id:0}
},{$unwind:"$To"},{$group:{_id:{From:"$From",To:"$To"},number:{$sum:1}}}
,{$limit:3},{$sort:{number:-1}}]);

Qu2:
db.messages.aggregate([
{$project:{From:"$headers.From",To:"$headers.To",_id:0}},
{$unwind:"$To"},
{$group:{_id:{From:"$From",To:"$To"},number:{$sum:1}}},
{$limit:30},
{$sort:{number:-1}}
]);

Need to remove duplicate To entries,
perhaps use distinct queries:
db.messages.aggregate([
{$match:{"headers.From":"susan.mara@enron.com","headers.To":"richard.shapiro@enron.com"}},
{$project:{From:"$headers.From",To:"$headers.To",_id:0}},
{$unwind:"$To"},
{$group:{_id:{From:"$From",To:"$To"},uniqueIds: { $addToSet: "$headers.To" },number:{$sum:1}}},
{$match:{uniqueIds:{$gt:1}}},
{$sort:{number:-1}}
]);

susan.mara@enron.com ,jeff.dasovich@enron.com = 906
susan.mara@enron.com to richard.shapiro@enron.com = 974
soblander@carrfut.com to soblander@carrfut.com
susan.mara@enron.com to james.steffes@enron.com
evelyn.metoyer@enron.com to kate.symes@enron.com
susan.mara@enron.com to alan.comnes@enron.com


db.messages.aggregate([
{$match:{"headers.From":"susan.mara@enron.com"}},
{$project:{From:"$headers.From",To:"$headers.To",_id:0}},
{$unwind:"$To"},
{$group:{_id:{From:"$From",To:"$To"},number:{$sum:1}}},
{$sort:{number:-1}}
]);

db.messages.aggregate([
{$match:{"headers.From":"susan.mara@enron.com","headers.To":"richard.shapiro@enron.com"}},
{$project:{From:"$headers.From",To:"$headers.To",_id:0}},
{$unwind:"$To"},
{$group:{_id:{From:"$From",To:"$To"},uniqueIds: { $addToSet: "$headers.To" },number:{$sum:1}}},
{$match:{uniqueIds:{$gt:1}}},
{$sort:{number:-1}}
]);


db.messages.aggregate([
{$match:{"headers.From":"susan.mara@enron.com","headers.To":"jeff.dasovich@enron.com"}},
{$project:{From:"$headers.From",To:"$headers.To",_id:0}},
{$unwind:"$To"},
{$group:{_id:{From:"$From",To:"$To"},uniqueIds: { $addToSet: "$headers.To" },number:{$sum:1}}},
{$match:{uniqueIds:{$gte:1}}},
{$limit:300},
{$sort:{number:-1}}]);


db.messages.aggregate([
{$match:{"headers.From":"susan.mara@enron.com"}},
{$project:{From:"$headers.From",To:"$headers.To",_id:0}},
{$unwind:"$To"},
{$group:{_id:{From:"$From",To:"$To"},uniqueIds: { $addToSet: "$headers.To" },number:{$sum:1}}},
{$match:{uniqueIds:{$gte:1}}},
{$limit:300},
{$sort:{number:-1}}]);


Qu 3
Update field via the shell
1st:
Find data
db.messages.find({"headers.Message-ID":"<8147308.1075851042335.JavaMail.evans@thyme>"})
2nd Update
db.messages.update(
   { "headers.Message-ID":"<8147308.1075851042335.JavaMail.evans@thyme>" },
   { $addToSet: {"headers.To":["mrpotatohead@10gen.com"]}}
)

Qu4
Blog enhancement likes up/down
# increments the number of likes on a particular comment. Returns the number of documented updated
    def increment_likes(self, permalink, comment_ordinal):

        #
        # XXX Final exam
        # Work here. You need to update the num_likes value in the comment being liked
        #
        post = self.posts.find_one({'permalink': permalink})
        comment = post['comments'][comment_ordinal]
        if (comment_ordinal != ''):
            comment['num_likes'] = int(comment['num_likes']) + 1
            post['comments'][comment_ordinal] = comment

        try:


            self.posts.save(post)

            return 0
        except:
            print "Could not update the likes, error"
        #return 0



python validate.py                                                                                  17:54
Welcome to the M101 Final Exam, Question 4 Validation Checker
Trying to grab the blog home page at url and find the first post. http://localhost:8082/
Found a post url:  /post/mxwnnnqaflufnqwlekfd
Trying to grab the number of likes for url  http://localhost:8082/post/mxwnnnqaflufnqwlekfd
Likes value  2
Clicking on Like link for post:  /post/mxwnnnqaflufnqwlekfd
Trying to grab the number of likes for url  http://localhost:8082/post/mxwnnnqaflufnqwlekfd
Likes value  3
Tests Passed for Final 4. Your validation code is 3f837hhg673ghd93hgf8

Qu7

# import required libraries
import pymongo
import sys
import subprocess

# Load the "albums" and "images" documents
subprocess.call('mongoimport --db test --collection images --drop images.json', shell = True)
subprocess.call('mongoimport --db test --collection albums --drop albums.json', shell = True)

# connection to the mongodb server
connection = pymongo.MongoClient("mongodb://localhost")

# function to remove orphan images
def remove_orphan_images():

# get handle for the database and collections
    db=connection.test
    albums=db.albums
    images=db.images

# Create index on the "images" key of albums collection for better performance
    albums.create_index("images")

# Get the image cursor
    cur_images=images.find()

# Loop through all the images
    for image in cur_images:
# Check if the image is present in any album
        cnt=albums.find({"images": image["_id"]}).count()
# If the count is 0, the image is orphan and should be deleted
        if (cnt == 0):
            images.delete_one({"_id": image["_id"]})

# Remaining records count
    record_count=images.count()
    print "Remainging records: " + str(record_count)

# Remainging records count with tags "kittens"
    cntTagKitten=images.find({"tags": "kittens"}).count()
    print "Remaining images with tags kittens: " + str(cntTagKitten)

# Call the function
remove_orphan_images()